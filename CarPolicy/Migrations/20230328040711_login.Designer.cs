// <auto-generated />
using System;
using CarPolicy.Search.Api.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarPolicy.Search.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230328040711_login")]
    partial class login
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarPolicy.Domain.Entities.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CarInspected")
                        .HasColumnType("bit");

                    b.Property<string>("CarModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ClientBirhDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIdentification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoveredHedges")
                        .HasColumnType("int");

                    b.Property<double>("MaxValueCovered")
                        .HasColumnType("float");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("PolicyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TakenPolicyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            CarInspected = false,
                            CarModel = "ABC-123",
                            CarRegistration = "",
                            ClientAddress = "Cra 15 #80 - 25",
                            ClientBirhDate = new DateTime(1992, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Bogotá",
                            ClientIdentification = "4746f2d2-5fcf-4fab-a509-22740b4d18cd",
                            ClientName = "Santiago",
                            CoveredHedges = 3,
                            MaxValueCovered = 1500000.0,
                            PolicyId = 1,
                            PolicyName = "Poliza de salud",
                            TakenPolicyDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            CarInspected = false,
                            CarModel = "",
                            CarRegistration = "DEF-456",
                            ClientAddress = "Cra 52 #62 - 30",
                            ClientBirhDate = new DateTime(1985, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Medellín",
                            ClientIdentification = "02ec67b6-f2f5-4441-a27a-093014ba7226",
                            ClientName = "Maria",
                            CoveredHedges = 0,
                            MaxValueCovered = 500000.0,
                            PolicyId = 2,
                            PolicyName = "Poliza de hogar",
                            TakenPolicyDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            CarInspected = false,
                            CarModel = "",
                            CarRegistration = "GHI-789",
                            ClientAddress = "Cra 1 #34 - 11",
                            ClientBirhDate = new DateTime(1998, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Cali",
                            ClientIdentification = "0899fa2f-746c-43e4-b327-d2edf7f9e789",
                            ClientName = "Juan",
                            CoveredHedges = 2,
                            MaxValueCovered = 750000.0,
                            PolicyId = 3,
                            PolicyName = "Poliza de vida",
                            TakenPolicyDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            CarInspected = true,
                            CarModel = "Chevrolet Spark",
                            CarRegistration = "JKL-012",
                            ClientAddress = "Cra 43 #21 - 85",
                            ClientBirhDate = new DateTime(1976, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Barranquilla",
                            ClientIdentification = "a46de578-6dbb-44da-be8c-0e2ddc016fe5",
                            ClientName = "Carla",
                            CoveredHedges = 1,
                            MaxValueCovered = 1000000.0,
                            PolicyId = 4,
                            PolicyName = "Poliza automotriz",
                            TakenPolicyDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            CarInspected = false,
                            CarModel = "",
                            CarRegistration = "MNO-345",
                            ClientAddress = "Cra 5 #8 - 12",
                            ClientBirhDate = new DateTime(1991, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Cartagena",
                            ClientIdentification = "b16bd1de-8601-4423-8dd0-abcd1197befb",
                            ClientName = "Pedro",
                            CoveredHedges = 0,
                            MaxValueCovered = 300000.0,
                            PolicyId = 5,
                            PolicyName = "Poliza de hogar",
                            TakenPolicyDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            CarInspected = false,
                            CarModel = "",
                            CarRegistration = "PQRS-678",
                            ClientAddress = "Cra 20 #70 - 40",
                            ClientBirhDate = new DateTime(1995, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Bogotá",
                            ClientIdentification = "6a4c9774-8d0b-41ab-ba84-1ca1d333a5cf",
                            ClientName = "Ana",
                            CoveredHedges = 1,
                            MaxValueCovered = 500000.0,
                            PolicyId = 6,
                            PolicyName = "Poliza de salud",
                            TakenPolicyDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            CarInspected = false,
                            CarModel = "",
                            CarRegistration = "TUV-901",
                            ClientAddress = "Cra 50 #10 - 25",
                            ClientBirhDate = new DateTime(1980, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Cali",
                            ClientIdentification = "ec21436c-478d-4ec6-9e77-f9b5466f8730",
                            ClientName = "Luis",
                            CoveredHedges = 0,
                            MaxValueCovered = 750000.0,
                            PolicyId = 7,
                            PolicyName = "Poliza de hogar",
                            TakenPolicyDate = new DateTime(2023, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            CarInspected = false,
                            CarModel = "",
                            CarRegistration = "TWXYZ-234",
                            ClientAddress = "Cra 80 #20 - 10",
                            ClientBirhDate = new DateTime(1997, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Medellín",
                            ClientIdentification = "6d785da4-8e5c-4f1d-9162-2f1cc0fe64c2",
                            ClientName = "Gabriela",
                            CoveredHedges = 2,
                            MaxValueCovered = 1250000.0,
                            PolicyId = 8,
                            PolicyName = "Poliza de vida",
                            TakenPolicyDate = new DateTime(2023, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            CarInspected = true,
                            CarModel = "Kia Rio",
                            CarRegistration = "ABXY-567",
                            ClientAddress = "Cra 34 #8 - 40",
                            ClientBirhDate = new DateTime(1989, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Barranquilla",
                            ClientIdentification = "e49aa1cc-4484-40b6-95f7-5a677109af95",
                            ClientName = "Diego",
                            CoveredHedges = 1,
                            MaxValueCovered = 1000000.0,
                            PolicyId = 9,
                            PolicyName = "Poliza automotriz",
                            TakenPolicyDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            CarInspected = false,
                            CarModel = "LMNO-890",
                            CarRegistration = "LMNO-890",
                            ClientAddress = "Cra 10 #5 - 11",
                            ClientBirhDate = new DateTime(1994, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientCity = "Cartagena",
                            ClientIdentification = "eb4f8cb1-6693-4c0c-8a02-6e56135fa866",
                            ClientName = "Valentina",
                            CoveredHedges = 0,
                            MaxValueCovered = 500000.0,
                            PolicyId = 10,
                            PolicyName = "Poliza de hogar",
                            TakenPolicyDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
